-- Lua script of map inside/houses/main_town/temple_of_time.
-- This script is executed every time the hero enters this map.

-- Feel free to modify the code below.
-- You can add more events and remove the ones you don't need.

-- See the Solarus Lua API documentation:
-- http://www.solarus-games.org/doc/latest

local map = ...
local game = map:get_game()
-- Surfaces
local surface = sol.surface.create(320, 256)
local bloom_surface
local white_surface = sol.surface.create(320, 256)
white_surface:fill_color{255, 255, 255}
local pendant_surface = sol.surface.create(320, 256)
local pendant_1 = sol.sprite.create("entities/items")
local pendant_2 = sol.sprite.create("entities/items")
local pendant_3 = sol.sprite.create("entities/items")
local sword_sprite = sol.sprite.create("entities/sword")
local hero_sprite_fg = sol.sprite.create("hero/tunic"..game:get_ability("tunic"))
hero_sprite_fg:set_animation("stopped")
hero_sprite_fg:set_direction(3)
pendant_1:set_animation("pendant_1")
pendant_2:set_animation("pendant_2")
pendant_3:set_animation("pendant_3")
local pendant_initial_radius = 80
local pendant_angular_speed = 4
local pendant_radius_speed = 12


map:register_event("on_started", function()
	sword:get_sprite():set_shader(nil)
	if game:is_step_done("master_sword_obtained") then
		sword:remove()
		cutscene_trigger:remove()
	end
end)
	
function map:on_draw(dst_surface)
	local width, height = dst_surface:get_size()
	center_x, center_y = width / 2, height / 2
	surface:draw(dst_surface)
	bloom_surface = dst_surface
	pendant_surface:clear()
	hero_sprite_fg:draw(pendant_surface)
	sword_sprite:draw(pendant_surface)
	pendant_1:draw(pendant_surface)
	pendant_2:draw(pendant_surface)
	pendant_3:draw(pendant_surface)
	pendant_surface:draw(dst_surface)
end

function sword:on_position_changed()
	local sword_x, sword_y = sword:get_position()
	sword_sprite:set_xy(sword_x, sword_y - 144)
end

	-- Event called at initialization time, as soon as this map is loaded.
	cutscene_trigger:register_event("on_interaction", function()
		if game:is_step_done("dungeon_3_completed") then
			
			-- Movements
		local pendant_movement_1 = sol.movement.create("circle")
		pendant_movement_1:set_angular_speed(pendant_angular_speed)
		pendant_movement_1:set_radius(pendant_initial_radius)
		pendant_movement_1:set_center(sword, 0, -152)
		pendant_movement_1:set_ignore_obstacles(true)
		pendant_movement_1:set_angle_from_center((0 * math.pi / 3) - (math.pi / 2))
		pendant_movement_1:set_radius_speed(pendant_radius_speed)
		
		local pendant_movement_2 = sol.movement.create("circle")
		pendant_movement_2:set_angular_speed(pendant_angular_speed)
		pendant_movement_2:set_radius(pendant_initial_radius)
		pendant_movement_2:set_center(sword, 0, -152)
		pendant_movement_2:set_ignore_obstacles(true)
		pendant_movement_2:set_angle_from_center((2 * math.pi / 3) - (math.pi / 2))
		pendant_movement_2:set_radius_speed(pendant_radius_speed)
		
		local pendant_movement_3 = sol.movement.create("circle")
		pendant_movement_3:set_angular_speed(pendant_angular_speed)
		pendant_movement_3:set_radius(pendant_initial_radius)
		pendant_movement_3:set_center(sword, 0, -152)
		pendant_movement_3:set_ignore_obstacles(true)
		pendant_movement_3:set_angle_from_center((4 * math.pi / 3) - (math.pi / 2))
		pendant_movement_3:set_radius_speed(pendant_radius_speed)
		
		local sword_movement_1 = sol.movement.create("straight")
		sword_movement_1:set_speed(1)
		sword_movement_1:set_max_distance(3)
		sword_movement_1:set_angle(math.pi/2)
		sword_movement_1:set_ignore_obstacles(true)

		map:set_cinematic_mode(true)
		local hero_sprite = hero:get_sprite()
		local hero_x, hero_y =  hero:get_position()
		hero_sprite:set_animation("grabbing")
		sol.audio.play_sound("characters/link/voice/pulling_heavy_object0")
		pendant_surface:fade_in()
		pendant_1:set_opacity(0)
		pendant_2:set_opacity(0)
		pendant_3:set_opacity(0)
		hero_sprite_fg:set_opacity(0)
		hero_sprite_fg:set_xy(hero_x, hero_y - 144)
		pendant_movement_1:start(pendant_1)
		pendant_movement_2:start(pendant_2)
		pendant_movement_3:start(pendant_3) 
		pendant_surface:set_shader(sol.shader.create("heavy_bloom"))
		sol.timer.start(map, 200, function()
			pendant_1:fade_in(80)
			pendant_2:fade_in(80)
			pendant_3:fade_in(80)
			pendant_movement_1:set_radius(4)
			pendant_movement_2:set_radius(4)
			pendant_movement_3:set_radius(4)
			hero_sprite:set_animation("pulling")
			sol.audio.play_sound("items/sword_out_of_pedestal")
			sword_movement_1:start(sword, function()
				surface:fade_in(50)
				white_surface:draw(surface)
				sol.timer.start(map, 100, function()
					hero_sprite:set_animation("stopped")
					sword:set_visible(false)
					hero_sprite_fg:fade_in()
					local sword_movement_2 = sol.movement.create("straight")
					sword_movement_2:set_speed(1)
					sword_movement_2:set_max_distance(1)
					sword_movement_2:set_angle(math.pi/2)
					sword_movement_2:set_ignore_obstacles(true)
					--sword_movement_2:start(sword, function()
					sol.timer.start(map, 1200, function()
						local sword_movement_3 = sol.movement.create("straight")
						sword_movement_3:set_speed(1)
						sword_movement_3:set_max_distance(1)
						sword_movement_3:set_angle(math.pi/2)
						sword_movement_3:set_ignore_obstacles(true)
						sol.timer.start(map, 1200, function()
						--sword_movement_3:start(sword, function()
							bloom_surface:set_shader(sol.shader.create("grayscale"))
							surface:fade_out()
							
							local sword_movement_4 = sol.movement.create("straight")
							sword_movement_4:set_speed(1)
							sword_movement_4:set_max_distance(1)
							sword_movement_4:set_angle(math.pi/2)
							sword_movement_4:set_ignore_obstacles(true)
							--sword_movement_4:start(sword, function()
							sol.timer.start(map, 1200, function()
								
								local sword_movement_5 = sol.movement.create("straight")
								sword_movement_5:set_speed(1)
								sword_movement_5:set_max_distance(1)
								sword_movement_5:set_angle(math.pi/2)
								sword_movement_5:set_ignore_obstacles(true)
								--sword_movement_5:start(sword, function()
								sol.timer.start(map, 1200, function()
									bloom_surface:set_shader(sol.shader.create("heavy_bloom"))
									hero_sprite_fg:set_shader(nil)
									surface:fade_in()
									pendant_movement_1:set_radius(16)
									pendant_movement_2:set_radius(16)
									pendant_movement_3:set_radius(16)
									sol.timer.start(map, 100, function()
										sword_sprite:set_shader(sol.shader.create("starman"))
										sol.audio.play_sound("items/sword_shown")
										surface:fade_out()
										local sword_movement_6 = sol.movement.create("straight")
										sword_movement_6:set_speed(8)
										sword_movement_6:set_max_distance(8)
										sword_movement_6:set_angle(3 * math.pi/2)
										sword_movement_6:set_ignore_obstacles(true)
										--sword_movement_6:start(sword, function()
										sol.timer.start(map, 1000, function()
											sol.timer.start(map, 2800, function()
												pendant_movement_1:set_radius(1)
												pendant_movement_2:set_radius(1)
												pendant_movement_3:set_radius(1)
												surface:fade_in()
												sol.timer.start(map, 200, function()
													sol.audio.play_sound("items/sword_shown")
													pendant_1:fade_out()
													pendant_2:fade_out()
													pendant_3:fade_out()
													sword_sprite:fade_out()
													surface:fade_out()
													hero_sprite_fg:fade_out()
													pendant_surface:set_shader(sol.shader.create("heavy_bloom"))
													bloom_surface:set_shader(nil)
												end)
											end)
										end)
									end)
								end)
							end)
						end)
					end)
				end)
			end)
		end)

		sol.audio.play_music("cutscenes/master_sword", function()
			sol.audio.stop_music()
			map:set_cinematic_mode(false)
			--surface:fade_in()
			sol.timer.start(map, 100, function()
				cutscene_trigger:remove()
				--surface:fade_out()
				sword:remove()
				hero:start_treasure("sword", 2)
				game:set_step_done("master_sword_obtained")
			end)
		end)

	end
end)