-- This is a hq2x glsl shader implementation from the mari0 project.
-- http://stabyourself.net/mari0/

shader{

    -- Source of the fragment shader.
    fragment_source = [[

        uniform sampler2D sol_texture;
        uniform vec2 sol_input_size;
        uniform vec2 sol_output_size;
        vec2 sol_texture_size = sol_input_size;

        const float mx = 0.325;      // start smoothing wt.
        const float k = -0.250;      // wt. decrease factor
        const float max_w = 0.25;    // max filter weight
        const float min_w =-0.05;    // min filter weight
        const float lum_add = 0.25;  // effects smoothing

        vec2 texture_coords = gl_TexCoord[0].xy;
            
        void main()
        {
            float x = 0.5 / sol_texture_size.x;
            float y = 0.5 / sol_texture_size.y;
            vec2 dg1 = vec2( x, y);
            vec2 dg2 = vec2(-x, y);
            vec2 dx = vec2(x, 0.0);
            vec2 dy = vec2(0.0, y);
    
            vec4 texcolor = texture2D(sol_texture, texture_coords);

            vec3 c00 = texture2D(sol_texture, texture_coords - dg1).xyz;
            vec3 c10 = texture2D(sol_texture, texture_coords - dy).xyz;
            vec3 c20 = texture2D(sol_texture, texture_coords - dg2).xyz;
            vec3 c01 = texture2D(sol_texture, texture_coords - dx).xyz;
            vec3 c11 = texcolor.xyz;
            vec3 c21 = texture2D(sol_texture, texture_coords + dx).xyz;
            vec3 c02 = texture2D(sol_texture, texture_coords + dg2).xyz;
            vec3 c12 = texture2D(sol_texture, texture_coords + dy).xyz;
            vec3 c22 = texture2D(sol_texture, texture_coords + dg1).xyz;
            vec3 dt = vec3(1.0, 1.0, 1.0);

            float md1 = dot(abs(c00 - c22), dt);
            float md2 = dot(abs(c02 - c20), dt);

            float w1 = dot(abs(c22 - c11), dt) * md2;
            float w2 = dot(abs(c02 - c11), dt) * md1;
            float w3 = dot(abs(c00 - c11), dt) * md2;
            float w4 = dot(abs(c20 - c11), dt) * md1;

            float t1 = w1 + w3;
            float t2 = w2 + w4;
            float ww = max(t1, t2) + 0.0001;

            c11 = (w1 * c00 + w2 * c20 + w3 * c22 + w4 * c02 + ww * c11) / (t1 + t2 + ww);

            float lc1 = k / (0.12 * dot(c10 + c12 + c11, dt) + lum_add);
            float lc2 = k / (0.12 * dot(c01 + c21 + c11, dt) + lum_add);

            w1 = clamp(lc1 * dot(abs(c11 - c10), dt) + mx, min_w, max_w);
            w2 = clamp(lc2 * dot(abs(c11 - c21), dt) + mx, min_w, max_w);
            w3 = clamp(lc1 * dot(abs(c11 - c12), dt) + mx, min_w, max_w);
            w4 = clamp(lc2 * dot(abs(c11 - c01), dt) + mx, min_w, max_w);

            gl_FragColor = vec4(w1 * c10 + w2 * c21 + w3 * c12 + w4 * c01 + (1.0 - w1 - w2 - w3 - w4) * c11, 1.0);
        }
    ]]
}
